version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: Postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: qwert
      POSTGRES_PASSWORD: 12345
    ports:
      - "8080:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - db_network
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qwert -d cars"]
      interval: 5s
      timeout: 5s
      retries: 10

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgAdmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "9090:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - db_network
    restart: unless-stopped
    depends_on:
      - postgres

  rabbitmq:
    image: rabbitmq:4.2.0-beta.2-management
    container_name: RabbitMQ
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "8081:5672"
      - "9091:15672" 
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 10


  data_reception:
    build:
      context: ./data_reception
      dockerfile: Dockerfile
    container_name: Data_receprion
    ports:
      - "8082:8082"
    networks:
      - db_network
      - app_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy


  data_consumer:
    build:
      context: ./data_consumer
      dockerfile: Dockerfile
    container_name: Data_consumer
    ports:
      - "8083:8083"
    networks:
      - db_network
      - app_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy


volumes:
  postgres_data:
  pgadmin_data:
  rabbitmq_data:

networks:
  db_network:
    driver: bridge
  app_network:
    driver: bridge